{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Simple Express Swagger",
        "description": "Just Simple Express\n access http://localhost:9000/code?auth={username} for recieved auth code\n get auth code and access http://localhost:9000/token?code={authCode} from above for access token",
        "license": {
            "name": "MIT",
            "url": "https://opensource.org/licenses/MIT"
        }
    },
    "host": "localhost:9000",
    "basePath": "/",
    "tags": [{
        "name": "Users",
        "description": "API for users in the system"
    }],
    "security": [{
        "Bearer": []
    }],
    "securityDefinitions": {
        "Bearer": {
            "name": "Authorization",
            "in": "header",
            "type": "apiKey"
        }
    },
    "schemes": [
        "http"
    ],
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json"
    ],
    "paths": {
        "/user": {
            "post": {
                "tags": [
                    "Users"
                ],
                "description": "Create new user in system",
                "parameters": [{
                    "name": "user",
                    "in": "body",
                    "description": "User that we want to create",
                    "schema": {
                        "$ref": "#/definitions/User"
                    }
                }],
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "New user is created",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "Users"
                ],
                "summary": "Get all users in system",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/Users"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "delete": {
                "summary": "Delete Method not allow",
                "tags": [
                    "Users"
                ],
                "responses": {
                    "405": {
                        "description": "Method is not allow"
                    }
                }
            },
            "put": {
                "summary": "Update user with give ID",
                "tags": [
                    "Users"
                ],
                "parameters": [{
                    "name": "user",
                    "in": "body",
                    "description": "User with new values of properties",
                    "schema": {
                        "$ref": "#/definitions/updateUser"
                    }
                }],
                "responses": {
                    "200": {
                        "description": "User is updated",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "User": {
            "required": [
                "name",
                "_id",
                "age"
            ],
            "properties": {
                "_id": {
                    "type": "integer",
                    "uniqueItems": true
                },
                "name": {
                    "type": "string"
                },
                "age": {
                    "type": "number"
                },
                "id_card": {
                    "type": "string"
                },
                "risk_level": {
                    "type": "enum",
                    "enum": ["LOW", "MEDIUM", "HIGH"]
                }

            }
        },
        "updateUser": {
            "required": [
                "name",
                "age"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "age": {
                    "type": "number"
                },
                "id_card": {
                    "type": "string"
                },
                "risk_level": {
                    "type": "enum",
                    "enum": ["LOW", "MEDIUM", "HIGH"]
                }

            }
        },
        "Users": {
            "type": "array",
            "$ref": "#/definitions/User"
        }

    }
}